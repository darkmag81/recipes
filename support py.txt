from os.path import exists
from functools import wraps
from flask import Flask, redirect, jsonify, render_template, request, flash, url_for, session, g, make_response
from werkzeug.security import generate_password_hash, check_password_hash
from flask_jwt import JWT, jwt_required, current_identity
import jwt
import os
import json
import datetime

app = Flask(__name__)
app.config['SECRET_KEY'] = os.urandom(12)
app.secret_key = os.urandom(12)
riddles_data = []

def token_required(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        token = request.args.get('token')
        if not token:
            return jsonify({'message' : 'token is missing!'}), 403
        try:
            data = jwt.decode(token, app.config['SECRET_KEY'])
        except:
            return jsonify({'message' : 'Token is invalid!'}), 403
        return f(*args, **kwargs)
    return decorated


def playerdata():
    with open("data/player_data.json", "r") as player_file:
        player_data = json.load(player_file)
        player_file.close()
    return player_data

def create_player_data_file():
    now = datetime.datetime.now()
    if not exists("data/player_data.json"):
        player_data_default = [{
        "ID": 0,
        "created": now.strftime("%Y-%m-%d %H:%M"),
        "username": "admin",
        "password": "pbkdf2:sha256:50000$claLFmkN$f52b60a471f8d54ace11c3b151067d693ddd166bdd2121f35df77c52c00aec0f",
        "last_score" : "Never Played",
        "admin": 1,
        "score": 0,
        "game_status": "Off",
        "current_round": 0,
        "tries": 1,
        "games_played": 99,
        "best_score": 13000,
        "bad_answer" : "never wrong"
        }]
        with open('data/player_data.json', 'a') as player_file:
            json.dump(player_data_default, player_file)
        player_file.close()
"""
Save <data> to <filename>
"""
def saveToFile(filename, data):
    with open(filename, "a") as file:
        file.writelines(data)

"""
Check if highscore file exists, if not create dummy JSON file
"""
def initialFileCheck():
    if not exists("data/highscore.json"):
        saveToFile("data/highscore.json", '[{"score":0,"name":"Dummy"}]')
    if not exists("data/score.json"):
        saveToFile("data/score.json", '[{"player":"Dummy", "score":0}]')
    create_player_data_file()
"""
Load highscore list from JSON file
"""
def load_highscore():
    with open("data/highscore.json", "r") as high_score_file:
        high_score = json.load(high_score_file)
    high_score_file.close()
    return high_score

"""
Add any bad answer to file "badanswers.txt" and update player log "<player>.txt"
with bad answers
"""
def addBadAnswers(username, message, index, lives):
    if not message:
        answer = "No answer"
    else:
        answer = message
    message_to_save = "Riddle " + str(index +1) + ", tries left " + str(lives) + ": " + answer + "\n"
    saveToFile("data/badanswers.txt", "({0}) - {1}".format(username.title(), answer + "\n"))
    file_name = "data/" + username + ".txt"
    saveToFile(file_name, message_to_save)

"""
Check if player score is higher than any score on current table,
if yes then add player score to list, sort list and cut down to 5 elements
"""
def highscoreUpdate(score, username, high_score):
    for x in range (0,len(high_score)):
        if score > int(high_score[x]["score"]):
            newRecord = {"name": username, "score": score}
            high_score.append(newRecord)
            break
    sorted_high_score = sorted(high_score, key=lambda k: k['score'], reverse=True)
    while len(sorted_high_score) > 5:
        del sorted_high_score[5]
    with open('data/highscore.json', 'w') as outfile:
        json.dump(sorted_high_score, outfile)
    outfile.close()
    with open("data/score.json", "r") as all_scores_file:
        all_scores = json.load(all_scores_file)
    all_scores_file.close()
    new_score_save = {"player": username, "score": score}
    all_scores.append(new_score_save)
    with open('data/score.json', 'w') as score_file:
        json.dump(all_scores, score_file)
    score_file.close()

def add_user(username, password):
    players = playerdata()
    now = datetime.datetime.now()
    new_player = {
        "ID": len(playerdata()),
        "created": now.strftime("%Y-%m-%d %H:%M"),
        "username": username,
        "password": password,
        "last_score" : "Never Played",
        "admin": 0,
        "score": 0,
        "game_status": "Off",
        "current_round": 0,
        "tries": 1,
        "games_played": 0,
        "best_score": 0,
        "bad_answer" : "none"
        }
    with open("data/player_data.json", "r") as players_list:
        players = json.load(players_list)
        players_list.close()
    players.append(new_player)
    with open("data/player_data.json", "w") as writeFile:
        json.dump(players, writeFile)
        writeFile.close()

def update_player_data(id, score, round, tries, bad_answer, game_status):
    with open("data/player_data.json", "r") as player_file:
        player_data = json.load(player_file)
    player_file.close()
    player_data[id]['bad_answer'] = bad_answer
    player_data[id]['score'] = score
    player_data[id]['tries'] = tries
    player_data[id]['current_round'] = round
    player_data[id]['game_status'] = game_status
    if score > player_data[id]['best_score']:
        player_data[id]['best_score'] = score
    with open("data/player_data.json", "w") as writeFile:
        json.dump(player_data, writeFile)
    writeFile.close()

@app.before_request
def before_request():
    g.user = None
    if 'user' in session:
        g.user = session['user']

@app.route('/', methods=["GET", "POST"])
def index():
    initialFileCheck()
    high_score = load_highscore()
    with open("data/player_data.json", "r") as player_file:
        player_data = json.load(player_file)
        player_file.close()
    return render_template("index.html", page_title='Main Page', high_score=high_score, players_registered=len(player_data))

@app.route('/login', methods=["GET"])
def login():
    message = ''
    return render_template("login.html", page_title='Sign In', message=message)

@app.route('/authentication', methods=["POST"])
def authentication():
    if request.method == "POST":
        session.pop('user', None)
        username = request.form['username']
        password = request.form['password']
        player_list = playerdata()
        for x in player_list:
            if username == x['username'] and check_password_hash(x['password'], password):
                session['user'] = request.form['username']
                token = jwt.encode({'user' : username, 'exp' : datetime.datetime.utcnow() + datetime.timedelta(minutes=20)}, app.config['SECRET_KEY'])
                return jsonify({'token': token}), 200
            else:
                return jsonify({'message': 'User or password are incorrect'}), 404
                # return redirect("/" + username + "?token=" + token)

@app.route('/register', methods=["GET", "POST"])
def register():
    message = ''
    player_list = playerdata()
    if request.method == "POST":
        username = request.form['username']
        password = request.form['password']
        for x in player_list:
            if username == x['username']:
                message = 'Username taken!'
                return render_template("register.html", page_title='Register', message=message)
        if request.form['password'] != request.form['password2']:
            message = "password didn't match!"
            return render_template("register.html", page_title='Register', message=message)
        try:
            add_user(username, generate_password_hash(password))
            return redirect(url_for('login'))
        except Exception as e:
            return jsonify({'error': e.message}), 500
        return redirect(url_for('login', username=username))
    return render_template("register.html", page_title='Register')


@app.route('/admin')
@token_required
def admin():
    if g.user:
        username = 'admin'
        with open("data/riddles.json", "r") as json_data:
            riddles_data = json.load(json_data)
        json_data.close()
        with open("data/player_data.json", "r") as player_file:
            player_data = json.load(player_file)
        player_file.close()
        for c in player_data:
            if username == c['username']:
                player_id = c['ID']
            player_top_score = player_data[player_id]['best_score']
            player_bad_answer = player_data[player_id]['bad_answer']
            player_register = player_data[player_id]['created']
            player_score = player_data[player_id]['score']
            player_games_played = player_data[player_id]['games_played']
            player_tries = player_data[player_id]['tries']
            player_current_round = player_data[player_id]['current_round']
            player_status = player_data[player_id]['game_status']
            player_last_score = player_data[player_id]['last_score']
        return render_template('admin.html', username=username,
        players_registered=len(player_data), questions=len(riddles_data),
        player_top_score=player_top_score, player_bad_answer=player_bad_answer,
        player_register=player_register, player_games_played=player_games_played,
        player_tries=player_tries, player_current_round=player_current_round,
        player_status=player_status, player_last_score=player_last_score,
        player_score=player_score)
    return redirect(url_for('index'))

@app.route('/<username>', methods=["GET", "POST"])
def playermenu(username):
    if g.user:
        player_id = 0
        with open("data/player_data.json", "r") as player_file:
            player_data = json.load(player_file)
        player_file.close()
        with open("data/riddles.json", "r") as json_data:
            riddles_data = json.load(json_data)
        json_data.close()
        for c in player_data:
            if username == c['username']:
                player_id = c['ID']
            player_top_score = player_data[player_id]['best_score']
            player_bad_answer = player_data[player_id]['bad_answer']
            player_register = player_data[player_id]['created']
            player_score = player_data[player_id]['score']
            player_games_played = player_data[player_id]['games_played']
            player_tries = player_data[player_id]['tries']
            player_current_round = player_data[player_id]['current_round']
            player_status = player_data[player_id]['game_status']
            player_last_score = player_data[player_id]['last_score']

        return render_template('player.html', username=username,
        players_registered=len(player_data), questions=len(riddles_data),
        player_top_score=player_top_score, player_bad_answer=player_bad_answer,
        player_register=player_register, player_games_played=player_games_played,
        player_tries=player_tries, player_current_round=player_current_round,
        player_status=player_status, player_last_score=player_last_score,
        player_score=player_score)
    return redirect(url_for('index'))

@app.route('/<username>/highscore', methods=["GET", "POST"])

def highscore(username):
    if g.user:
        high_score = load_highscore()
        return render_template("highscore.html", high_score=high_score, username=username)
    return redirect(url_for('index'))

@app.route('/<username>/play', methods=["GET", "POST"])

def user(username):
    if g.user:
        riddles_data = []
        riddle_index = 0
        score = 0
        tries = 1
        initialFileCheck()
        element_wrong_answer_text = ''
        high_score = load_highscore()
        with open("data/player_data.json", "r") as player_file:
            player_data = json.load(player_file)
        player_file.close()
        for c in player_data:
            if username == c['username']:
                player_id = c['ID']
        if player_data[player_id]['game_status'] == 'In game':
            riddle_index = player_data[player_id]['current_round']
            score = player_data[player_id]['score']
            tries = player_data[player_id]['tries']
            if tries == 0:
                element_wrong_answer_text = 'This is your last attempt'
            else:
                element_wrong_answer_text = ''
        if player_data[player_id]['game_status'] == 'Off':
            riddle_index = 0
            score = 0
            tries = 1
            player_data[player_id]['game_status'] = 'In game'
            player_data[player_id]['current_round'] = 0
            player_data[player_id]['tries'] = 1

        with open("data/riddles.json", "r") as json_data:
            riddles_data = json.load(json_data)
            json_data.close()
        sorted_high_score = sorted(high_score, key=lambda k: k['score'], reverse=True) #  highscore sort
        while len(sorted_high_score) > 5:
            del sorted_high_score[5]                        # remove from highscore players over 5th place
        with open('data/highscore.json', 'w') as outfile:
            json.dump(sorted_high_score, outfile)
        outfile.close()                                     #save highscore table
        if request.method == "POST":
            player_response = request.form["message"].lower()          # make answer lowercase
            if riddles_data[riddle_index]["answer"] == player_response:              # correct answer
                riddle_index += 1
                score += 1
                tries = player_data[player_id]['tries']
                element_wrong_answer_text = ''
                update_player_data(player_id, score, riddle_index, 1, player_data[player_id]['bad_answer'], 'In game')
                if riddle_index >= len(riddles_data):                             # if answered last riddle go to end.html
                    highscoreUpdate(score, username, high_score)
                    high_score = load_highscore()
                    player_data[player_id]['last_score'] = score
                    player_data[player_id]['games_played'] += 1
                    with open("data/player_data.json", "w") as writeFile:
                        json.dump(player_data, writeFile)
                    writeFile.close()
                    return redirect("/" + username + "/endgame")
            else:                                                   # wrong answer
                if tries >= 1:                                      # if there is one or more tries available
                    tries -= 1
                    element_wrong_answer_text = '"' + player_response + '" is wrong! Please try one more time...'
                    update_player_data(player_id, score, riddle_index, 0, player_response, 'In game')
                    return render_template("riddle.html", username=username,
                           riddles_data=riddles_data, riddle_index=riddle_index,
                           element_wrong_answer_text=element_wrong_answer_text,
                           score=score, tries=tries)
                if tries == 0:                                      # if there is no more tries left
                    if riddle_index == len(riddles_data)-1:                       # check if last riddle
                        highscoreUpdate(score, username, high_score)
                        high_score = load_highscore()
                        player_data[player_id]['last_score'] = score
                        player_data[player_id]['games_played'] += 1
                        with open("data/player_data.json", "w") as writeFile:
                            json.dump(player_data, writeFile)
                        writeFile.close()
                        return redirect("/" + username + "/endgame")
                    if riddle_index < len(riddles_data):                          # if not last riddle
                        riddle_index += 1
                        tries = 1
                        update_player_data(player_id, score, riddle_index, tries, player_response, 'In game')
                        return render_template("riddle.html", riddle_index=riddle_index,
                               element_wrong_answer_text=element_wrong_answer_text,
                               score=score, tries=tries, riddles_data=riddles_data,
                               username=username)
        update_player_data(player_id, score, riddle_index, 1, player_data[player_id]['bad_answer'], 'In game')
        return render_template("riddle.html",
            riddle_index=riddle_index, element_wrong_answer_text=element_wrong_answer_text,
            score=score, tries=tries, riddles_data=riddles_data, username=username)
    return redirect(url_for('index'))

@app.route('/<username>/endgame', methods=["GET", "POST"])
def end_game(username):
    if g.user:
        high_score = load_highscore()
        with open("data/score.json", "r") as all_scores_file:
            all_scores = json.load(all_scores_file)
        for x in range (0,len(all_scores)):
            if username == all_scores[x]["player"]:
                score = int(all_scores[x]["score"])
        if request.method == "POST":
            return redirect(request.form["username"])
        with open("data/player_data.json", "r") as player_file:
            player_data = json.load(player_file)
        player_file.close()
        for c in player_data:
            if username == c['username']:
                player_id = c['ID']
        update_player_data(player_id, 0, 0, 1, player_data[player_id]['bad_answer'], 'Off')
        return render_template("end.html", high_score=high_score, username=username, score=score)
    return redirect(url_for('index'))

@app.route('/<username>/logoff', methods=["GET", "POST"])

def logoff(username):
    session.pop('user', None)
    return redirect(url_for('index'))

if __name__ == '__main__':
    app.run(host=os.environ.get('IP'),
    port=int(os.environ.get('PORT')),
    debug=True)